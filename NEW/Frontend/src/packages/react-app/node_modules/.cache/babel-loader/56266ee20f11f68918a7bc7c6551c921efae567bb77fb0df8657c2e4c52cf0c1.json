{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nimport { useBlockNumbers } from './useBlockNumbers';\nimport { useMemo } from 'react';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta(queryParams = {}) {\n  var _a, _b;\n  const chainId = useChainId({\n    queryParams\n  });\n  const {\n    refresh: configRefresh\n  } = useConfig();\n  const blockNumbers = useBlockNumbers();\n  const address = useMulticallAddress(queryParams);\n  const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n  const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n  const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n  const timestampResult = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  const difficulty = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  const timestamp = useMemo(() => {\n    try {\n      return timestampResult !== undefined ? new Date(BigNumber.from(timestampResult.value).mul(1000).toNumber()) : undefined;\n    } catch (e) {\n      console.warn('Failed to parse timestamp of a block', e);\n    }\n  }, [timestampResult]);\n  return {\n    timestamp,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n    blockNumber: chainId ? blockNumbers[chainId] : undefined\n  };\n}","map":{"version":3,"names":["MultiCallABI","BigNumber","useMulticallAddress","useRawCall","useChainId","useConfig","useBlockNumbers","useMemo","GET_CURRENT_BLOCK_TIMESTAMP_CALL","encodeFunctionData","GET_CURRENT_BLOCK_DIFFICULTY_CALL","useBlockMeta","queryParams","chainId","refresh","configRefresh","blockNumbers","address","_a","isStatic","_b","refreshPerBlocks","undefined","timestampResult","data","difficulty","timestamp","Date","from","value","mul","toNumber","e","console","warn","blockNumber"],"sources":["C:\\Users\\win\\Downloads\\clone res gi\\clone\\my-eth-app\\node_modules\\@usedapp\\core\\src\\hooks\\useBlockMeta.ts"],"sourcesContent":["import { ChainId, MultiCallABI } from '../constants'\nimport { BigNumber } from 'ethers'\nimport { useMulticallAddress } from './useMulticallAddress'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useRawCall } from './useRawCalls'\nimport { useChainId } from './useChainId'\nimport { useConfig } from './useConfig'\nimport { useBlockNumbers } from './useBlockNumbers'\nimport { useMemo } from 'react'\n\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', [])\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', [])\n\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta(queryParams: QueryParams = {}) {\n  const chainId = useChainId({ queryParams })\n  const { refresh: configRefresh } = useConfig()\n  const blockNumbers = useBlockNumbers()\n\n  const address = useMulticallAddress(queryParams)\n  const refresh = queryParams.refresh ?? configRefresh\n  const isStatic = queryParams.isStatic ?? refresh === 'never'\n  const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined\n  const timestampResult = useRawCall(\n    address &&\n      chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n      }\n  )\n  const difficulty = useRawCall(\n    address &&\n      chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n      }\n  )\n\n  const timestamp = useMemo(() => {\n    try {\n      return timestampResult !== undefined\n        ? new Date(BigNumber.from(timestampResult.value).mul(1000).toNumber())\n        : undefined\n    } catch (e: any) {\n      console.warn('Failed to parse timestamp of a block', e)\n    }\n  }, [timestampResult])\n\n  return {\n    timestamp,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n    blockNumber: chainId ? blockNumbers[chainId as ChainId] : undefined,\n  }\n}\n"],"mappings":"AAAA,SAAkBA,YAAY,QAAQ,cAAc;AACpD,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,OAAO,QAAQ,OAAO;AAE/B,MAAMC,gCAAgC,GAAGR,YAAY,CAACS,kBAAkB,CAAC,0BAA0B,EAAE,EAAE,CAAC;AACxG,MAAMC,iCAAiC,GAAGV,YAAY,CAACS,kBAAkB,CAAC,2BAA2B,EAAE,EAAE,CAAC;AAE1G;;;;AAIA,OAAM,SAAUE,YAAYA,CAACC,WAAA,GAA2B,EAAE;;EACxD,MAAMC,OAAO,GAAGT,UAAU,CAAC;IAAEQ;EAAW,CAAE,CAAC;EAC3C,MAAM;IAAEE,OAAO,EAAEC;EAAa,CAAE,GAAGV,SAAS,EAAE;EAC9C,MAAMW,YAAY,GAAGV,eAAe,EAAE;EAEtC,MAAMW,OAAO,GAAGf,mBAAmB,CAACU,WAAW,CAAC;EAChD,MAAME,OAAO,GAAG,CAAAI,EAAA,GAAAN,WAAW,CAACE,OAAO,cAAAI,EAAA,cAAAA,EAAA,GAAIH,aAAa;EACpD,MAAMI,QAAQ,GAAG,CAAAC,EAAA,GAAAR,WAAW,CAACO,QAAQ,cAAAC,EAAA,cAAAA,EAAA,GAAIN,OAAO,KAAK,OAAO;EAC5D,MAAMO,gBAAgB,GAAG,OAAOP,OAAO,KAAK,QAAQ,GAAGA,OAAO,GAAGQ,SAAS;EAC1E,MAAMC,eAAe,GAAGpB,UAAU,CAChCc,OAAO,IACLJ,OAAO,KAAKS,SAAS,IAAI;IACvBL,OAAO;IACPO,IAAI,EAAEhB,gCAAgC;IACtCK,OAAO;IACPM,QAAQ;IACRE;GACD,CACJ;EACD,MAAMI,UAAU,GAAGtB,UAAU,CAC3Bc,OAAO,IACLJ,OAAO,KAAKS,SAAS,IAAI;IACvBL,OAAO;IACPO,IAAI,EAAEd,iCAAiC;IACvCG,OAAO;IACPM,QAAQ;IACRE;GACD,CACJ;EAED,MAAMK,SAAS,GAAGnB,OAAO,CAAC,MAAK;IAC7B,IAAI;MACF,OAAOgB,eAAe,KAAKD,SAAS,GAChC,IAAIK,IAAI,CAAC1B,SAAS,CAAC2B,IAAI,CAACL,eAAe,CAACM,KAAK,CAAC,CAACC,GAAG,CAAC,IAAI,CAAC,CAACC,QAAQ,EAAE,CAAC,GACpET,SAAS;KACd,CAAC,OAAOU,CAAM,EAAE;MACfC,OAAO,CAACC,IAAI,CAAC,sCAAsC,EAAEF,CAAC,CAAC;;EAE3D,CAAC,EAAE,CAACT,eAAe,CAAC,CAAC;EAErB,OAAO;IACLG,SAAS;IACTD,UAAU,EAAEA,UAAU,KAAKH,SAAS,GAAGrB,SAAS,CAAC2B,IAAI,CAACH,UAAU,CAACI,KAAK,CAAC,GAAGP,SAAS;IACnFa,WAAW,EAAEtB,OAAO,GAAGG,YAAY,CAACH,OAAkB,CAAC,GAAGS;GAC3D;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}