{"ast":null,"code":"import { useMemo } from 'react';\nimport { useReadonlyNetworks } from '../providers/network';\nimport { useChainId } from './useChainId';\n/**\n * Gets a readonly provider for specific chainId.\n * @param opts.chainId Requested chainId. If not provided, the currently connected wallet's chainId will be used or the default one from the config.\n * @returns An ethers.js provider or undefined.\n * @public\n */\nexport function useReadonlyNetwork(opts = {}) {\n  const chainId = useChainId({\n    queryParams: {\n      chainId: opts.chainId\n    }\n  });\n  const providers = useReadonlyNetworks();\n  return useMemo(() => providers[chainId] !== undefined && chainId !== undefined ? {\n    provider: providers[chainId],\n    chainId: chainId\n  } : undefined, [chainId, providers[chainId]]);\n}","map":{"version":3,"names":["useMemo","useReadonlyNetworks","useChainId","useReadonlyNetwork","opts","chainId","queryParams","providers","undefined","provider"],"sources":["C:\\Users\\win\\Downloads\\clone res gi\\clone\\my-eth-app\\node_modules\\@usedapp\\core\\src\\hooks\\useReadonlyProvider.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport { ChainId } from '../constants'\nimport { useReadonlyNetworks } from '../providers/network'\nimport { useChainId } from './useChainId'\nimport type { providers } from 'ethers'\n\nexport interface UseReadonlyProviderOptions {\n  chainId?: number\n}\n\nexport interface ReadonlyNetwork {\n  provider: providers.BaseProvider\n  chainId: number\n}\n\n/**\n * Gets a readonly provider for specific chainId.\n * @param opts.chainId Requested chainId. If not provided, the currently connected wallet's chainId will be used or the default one from the config.\n * @returns An ethers.js provider or undefined.\n * @public\n */\nexport function useReadonlyNetwork(opts: UseReadonlyProviderOptions = {}): ReadonlyNetwork | undefined {\n  const chainId = useChainId({ queryParams: { chainId: opts.chainId } })\n  const providers = useReadonlyNetworks()\n  return useMemo(\n    () =>\n      providers[chainId as ChainId] !== undefined && chainId !== undefined\n        ? {\n            provider: providers[chainId as ChainId]!,\n            chainId: chainId,\n          }\n        : undefined,\n    [chainId, providers[chainId as ChainId]]\n  )\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,UAAU,QAAQ,cAAc;AAYzC;;;;;;AAMA,OAAM,SAAUC,kBAAkBA,CAACC,IAAA,GAAmC,EAAE;EACtE,MAAMC,OAAO,GAAGH,UAAU,CAAC;IAAEI,WAAW,EAAE;MAAED,OAAO,EAAED,IAAI,CAACC;IAAO;EAAE,CAAE,CAAC;EACtE,MAAME,SAAS,GAAGN,mBAAmB,EAAE;EACvC,OAAOD,OAAO,CACZ,MACEO,SAAS,CAACF,OAAkB,CAAC,KAAKG,SAAS,IAAIH,OAAO,KAAKG,SAAS,GAChE;IACEC,QAAQ,EAAEF,SAAS,CAACF,OAAkB,CAAE;IACxCA,OAAO,EAAEA;GACV,GACDG,SAAS,EACf,CAACH,OAAO,EAAEE,SAAS,CAACF,OAAkB,CAAC,CAAC,CACzC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}