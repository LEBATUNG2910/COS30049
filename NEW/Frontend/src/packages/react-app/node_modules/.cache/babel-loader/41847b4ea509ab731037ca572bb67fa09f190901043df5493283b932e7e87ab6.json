{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { useIsMounted } from '../../hooks/useIsMounted';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider({\n  children\n}) {\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n  const isMounted = useIsMounted();\n  const {\n    chainId,\n    account\n  } = useEthers();\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  const addNotification = useCallback(({\n    notification,\n    chainId\n  }) => {\n    if (isMounted()) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId,\n        notification: Object.assign(Object.assign({}, notification), {\n          id: nanoid()\n        })\n      });\n    }\n  }, [dispatch]);\n  const removeNotification = useCallback(({\n    notificationId,\n    chainId\n  }) => {\n    if (isMounted()) {\n      dispatch({\n        type: 'REMOVE_NOTIFICATION',\n        chainId,\n        notificationId\n      });\n    }\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification,\n      notifications,\n      removeNotification\n    },\n    children: children\n  });\n}","map":{"version":3,"names":["useCallback","useEffect","useReducer","useEthers","NotificationsContext","DEFAULT_NOTIFICATIONS","notificationReducer","useIsMounted","nanoid","NotificationsProvider","children","notifications","dispatch","isMounted","chainId","account","type","notification","id","submittedAt","Date","now","address","addNotification","Object","assign","removeNotification","notificationId","_jsx","Provider","value"],"sources":["C:\\Users\\win\\Downloads\\clone res gi\\clone\\my-eth-app\\node_modules\\@usedapp\\core\\src\\providers\\notifications\\provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers } from '../../hooks'\nimport { NotificationsContext } from './context'\nimport { AddNotificationPayload, DEFAULT_NOTIFICATIONS, RemoveNotificationPayload } from './model'\nimport { notificationReducer } from './reducer'\nimport { useIsMounted } from '../../hooks/useIsMounted'\nimport { nanoid } from 'nanoid'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function NotificationsProvider({ children }: Props) {\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS)\n  const isMounted = useIsMounted()\n  const { chainId, account } = useEthers()\n\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account,\n        },\n      })\n    }\n  }, [account, chainId])\n\n  const addNotification = useCallback(\n    ({ notification, chainId }: AddNotificationPayload) => {\n      if (isMounted()) {\n        dispatch({\n          type: 'ADD_NOTIFICATION',\n          chainId,\n          notification: { ...notification, id: nanoid() },\n        })\n      }\n    },\n    [dispatch]\n  )\n\n  const removeNotification = useCallback(\n    ({ notificationId, chainId }: RemoveNotificationPayload) => {\n      if (isMounted()) {\n        dispatch({\n          type: 'REMOVE_NOTIFICATION',\n          chainId,\n          notificationId,\n        })\n      }\n    },\n    [dispatch]\n  )\n\n  return (\n    <NotificationsContext.Provider value={{ addNotification, notifications, removeNotification }} children={children} />\n  )\n}\n"],"mappings":";AAAA,SAAoBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACrE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,oBAAoB,QAAQ,WAAW;AAChD,SAAiCC,qBAAqB,QAAmC,SAAS;AAClG,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,MAAM,QAAQ,QAAQ;AAM/B,OAAM,SAAUC,qBAAqBA,CAAC;EAAEC;AAAQ,CAAS;EACvD,MAAM,CAACC,aAAa,EAAEC,QAAQ,CAAC,GAAGV,UAAU,CAACI,mBAAmB,EAAED,qBAAqB,CAAC;EACxF,MAAMQ,SAAS,GAAGN,YAAY,EAAE;EAChC,MAAM;IAAEO,OAAO;IAAEC;EAAO,CAAE,GAAGZ,SAAS,EAAE;EAExCF,SAAS,CAAC,MAAK;IACb,IAAIc,OAAO,IAAID,OAAO,EAAE;MACtBF,QAAQ,CAAC;QACPI,IAAI,EAAE,kBAAkB;QACxBF,OAAO,EAAEA,OAAO;QAChBG,YAAY,EAAE;UACZD,IAAI,EAAE,iBAAiB;UACvBE,EAAE,EAAEV,MAAM,EAAE;UACZW,WAAW,EAAEC,IAAI,CAACC,GAAG,EAAE;UACvBC,OAAO,EAAEP;;OAEZ,CAAC;;EAEN,CAAC,EAAE,CAACA,OAAO,EAAED,OAAO,CAAC,CAAC;EAEtB,MAAMS,eAAe,GAAGvB,WAAW,CACjC,CAAC;IAAEiB,YAAY;IAAEH;EAAO,CAA0B,KAAI;IACpD,IAAID,SAAS,EAAE,EAAE;MACfD,QAAQ,CAAC;QACPI,IAAI,EAAE,kBAAkB;QACxBF,OAAO;QACPG,YAAY,EAAAO,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOR,YAAY;UAAEC,EAAE,EAAEV,MAAM;QAAE;OAC9C,CAAC;;EAEN,CAAC,EACD,CAACI,QAAQ,CAAC,CACX;EAED,MAAMc,kBAAkB,GAAG1B,WAAW,CACpC,CAAC;IAAE2B,cAAc;IAAEb;EAAO,CAA6B,KAAI;IACzD,IAAID,SAAS,EAAE,EAAE;MACfD,QAAQ,CAAC;QACPI,IAAI,EAAE,qBAAqB;QAC3BF,OAAO;QACPa;OACD,CAAC;;EAEN,CAAC,EACD,CAACf,QAAQ,CAAC,CACX;EAED,OACEgB,IAAA,CAACxB,oBAAoB,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEP,eAAe;MAAEZ,aAAa;MAAEe;IAAkB,CAAE;IAAEhB,QAAQ,EAAEA;EAAQ,EAAI;AAExH"},"metadata":{},"sourceType":"module","externalDependencies":[]}