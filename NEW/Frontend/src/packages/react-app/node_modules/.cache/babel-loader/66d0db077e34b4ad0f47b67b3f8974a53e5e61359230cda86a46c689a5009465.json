{"ast":null,"code":"import { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @param queryParams see {@link QueryParams}.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress, queryParams = {}) {\n  var _a, _b;\n  const partialCall = tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    address: tokenAddress,\n    args: []\n  };\n  const args = ['name', 'symbol', 'decimals', 'totalSupply'].map(method => partialCall && Object.assign(Object.assign({}, partialCall), {\n    method\n  }));\n  const [name, symbol, decimals, totalSupply] = useCalls(args, queryParams);\n  if (!name && !symbol && !decimals && !totalSupply) {\n    return undefined;\n  }\n  return {\n    name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n    symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n    decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n    totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0]\n  };\n}","map":{"version":3,"names":["ERC20Interface","useCalls","Contract","useToken","tokenAddress","queryParams","partialCall","contract","address","args","map","method","Object","assign","name","symbol","decimals","totalSupply","undefined","_a","value","_b"],"sources":["C:\\Users\\win\\Downloads\\clone res gi\\clone\\my-eth-app\\node_modules\\@usedapp\\core\\src\\hooks\\useToken.ts"],"sourcesContent":["import { ERC20Interface, QueryParams } from '../constants'\nimport { Falsy } from '../model/types'\nimport { TokenInfo } from '../model/TokenInfo'\nimport { Call, useCalls } from './useCall'\nimport { Contract } from 'ethers'\n\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @param queryParams see {@link QueryParams}.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress: string | Falsy, queryParams: QueryParams = {}): TokenInfo | undefined {\n  const partialCall = tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    address: tokenAddress,\n    args: [],\n  }\n  const args = ['name', 'symbol', 'decimals', 'totalSupply'].map(\n    (method): Call | Falsy => partialCall && { ...partialCall, method }\n  )\n  const [name, symbol, decimals, totalSupply] = useCalls(args, queryParams)\n\n  if (!name && !symbol && !decimals && !totalSupply) {\n    return undefined\n  }\n\n  return {\n    name: name?.value[0] ?? '',\n    symbol: symbol?.value[0] ?? '',\n    decimals: decimals?.value[0],\n    totalSupply: totalSupply?.value[0],\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAqB,cAAc;AAG1D,SAAeC,QAAQ,QAAQ,WAAW;AAC1C,SAASC,QAAQ,QAAQ,QAAQ;AAEjC;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUC,QAAQA,CAACC,YAA4B,EAAEC,WAAA,GAA2B,EAAE;;EAClF,MAAMC,WAAW,GAAGF,YAAY,IAAI;IAClCG,QAAQ,EAAE,IAAIL,QAAQ,CAACE,YAAY,EAAEJ,cAAc,CAAC;IACpDQ,OAAO,EAAEJ,YAAY;IACrBK,IAAI,EAAE;GACP;EACD,MAAMA,IAAI,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,CAACC,GAAG,CAC3DC,MAAM,IAAmBL,WAAW,IAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAASP,WAAW;IAAEK;EAAM,EAAE,CACpE;EACD,MAAM,CAACG,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAACQ,IAAI,EAAEJ,WAAW,CAAC;EAEzE,IAAI,CAACS,IAAI,IAAI,CAACC,MAAM,IAAI,CAACC,QAAQ,IAAI,CAACC,WAAW,EAAE;IACjD,OAAOC,SAAS;;EAGlB,OAAO;IACLJ,IAAI,EAAE,CAAAK,EAAA,GAAAL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,KAAK,CAAC,CAAC,CAAC,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE;IAC1BJ,MAAM,EAAE,CAAAM,EAAA,GAAAN,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK,KAAK,CAAC,CAAC,CAAC,cAAAC,EAAA,cAAAA,EAAA,GAAI,EAAE;IAC9BL,QAAQ,EAAEA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,KAAK,CAAC,CAAC,CAAC;IAC5BH,WAAW,EAAEA,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,KAAK,CAAC,CAAC;GAClC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}