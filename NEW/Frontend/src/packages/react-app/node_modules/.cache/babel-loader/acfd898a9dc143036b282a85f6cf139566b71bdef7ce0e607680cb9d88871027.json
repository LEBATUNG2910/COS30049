{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from '../hooks';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\nimport { WindowProvider } from './window';\nimport { ConnectorContextProvider } from './network/connectors/context';\n/**\n * Provides basic services for a DApp.\n * @public\n */\nexport function DAppProvider({\n  config,\n  children\n}) {\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    })\n  }));\n}\nconst getMulticallAddresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => result[network.chainId] = network.multicallAddress);\n  return result;\n};\nconst getMulticall2Addresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\nfunction DAppProviderWithConfig({\n  children\n}) {\n  const {\n    multicallAddresses,\n    networks,\n    multicallVersion\n  } = useConfig();\n  const defaultAddresses = useMemo(() => multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks), [networks, multicallVersion]);\n  const multicallAddressesMerged = useMemo(() => Object.assign(Object.assign({}, defaultAddresses), multicallAddresses), [defaultAddresses, multicallAddresses]);\n  return _jsx(WindowProvider, {\n    children: _jsx(ReadonlyNetworksProvider, {\n      children: _jsx(ConnectorContextProvider, {\n        children: _jsx(BlockNumbersProvider, {\n          children: _jsx(LocalMulticallProvider, {\n            children: _jsx(MultiChainStateProvider, Object.assign({\n              multicallAddresses: multicallAddressesMerged\n            }, {\n              children: _jsx(NotificationsProvider, {\n                children: _jsx(TransactionProvider, {\n                  children: children\n                })\n              })\n            }))\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["useMemo","ConfigProvider","MultiChainStateProvider","useConfig","NotificationsProvider","TransactionProvider","LocalMulticallProvider","ReadonlyNetworksProvider","BlockNumbersProvider","WindowProvider","ConnectorContextProvider","DAppProvider","config","children","_jsx","Object","assign","DAppProviderWithConfig","getMulticallAddresses","networks","result","forEach","network","chainId","multicallAddress","getMulticall2Addresses","multicall2Address","multicallAddresses","multicallVersion","defaultAddresses","multicallAddressesMerged"],"sources":["C:\\Users\\win\\Downloads\\clone res gi\\clone\\my-eth-app\\node_modules\\@usedapp\\core\\src\\providers\\DAppProvider.tsx"],"sourcesContent":["import { ReactNode, useMemo } from 'react'\nimport { Config, Chain } from '../constants'\nimport { ConfigProvider } from './config'\nimport { MultiChainStateProvider } from './chainState'\nimport { useConfig } from '../hooks'\nimport { NotificationsProvider } from './notifications/provider'\nimport { TransactionProvider } from './transactions/provider'\nimport { LocalMulticallProvider } from './LocalMulticallProvider'\nimport { ReadonlyNetworksProvider } from './network'\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers'\nimport { WindowProvider } from './window'\nimport { ConnectorContextProvider } from './network/connectors/context'\n\nexport interface DAppProviderProps {\n  children?: ReactNode\n  /**\n   * Configuration of the DApp. See {@link Config} for more details.\n   */\n  config: Config\n}\n\n/**\n * Provides basic services for a DApp.\n * @public\n */\nexport function DAppProvider({ config, children }: DAppProviderProps) {\n  return (\n    <ConfigProvider config={config}>\n      <DAppProviderWithConfig>{children}</DAppProviderWithConfig>\n    </ConfigProvider>\n  )\n}\n\ninterface WithConfigProps {\n  children: ReactNode\n}\n\nconst getMulticallAddresses = (networks: Chain[] | undefined) => {\n  const result: { [index: number]: string } = {}\n  networks?.forEach((network) => (result[network.chainId] = network.multicallAddress))\n  return result\n}\n\nconst getMulticall2Addresses = (networks: Chain[] | undefined) => {\n  const result: { [index: number]: string } = {}\n  networks?.forEach((network) => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address\n    }\n  })\n  return result\n}\n\nfunction DAppProviderWithConfig({ children }: WithConfigProps) {\n  const { multicallAddresses, networks, multicallVersion } = useConfig()\n  const defaultAddresses = useMemo(\n    () => (multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks)),\n    [networks, multicallVersion]\n  )\n  const multicallAddressesMerged = useMemo(() => ({ ...defaultAddresses, ...multicallAddresses }), [\n    defaultAddresses,\n    multicallAddresses,\n  ])\n\n  return (\n    <WindowProvider>\n      <ReadonlyNetworksProvider>\n        <ConnectorContextProvider>\n          <BlockNumbersProvider>\n            <LocalMulticallProvider>\n              <MultiChainStateProvider multicallAddresses={multicallAddressesMerged}>\n                <NotificationsProvider>\n                  <TransactionProvider>{children}</TransactionProvider>\n                </NotificationsProvider>\n              </MultiChainStateProvider>\n            </LocalMulticallProvider>\n          </BlockNumbersProvider>\n        </ConnectorContextProvider>\n      </ReadonlyNetworksProvider>\n    </WindowProvider>\n  )\n}\n"],"mappings":";AAAA,SAAoBA,OAAO,QAAQ,OAAO;AAE1C,SAASC,cAAc,QAAQ,UAAU;AACzC,SAASC,uBAAuB,QAAQ,cAAc;AACtD,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,wBAAwB,QAAQ,WAAW;AACpD,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAASC,cAAc,QAAQ,UAAU;AACzC,SAASC,wBAAwB,QAAQ,8BAA8B;AAUvE;;;;AAIA,OAAM,SAAUC,YAAYA,CAAC;EAAEC,MAAM;EAAEC;AAAQ,CAAqB;EAClE,OACEC,IAAA,CAACb,cAAc,EAAAc,MAAA,CAAAC,MAAA;IAACJ,MAAM,EAAEA;EAAM;IAAAC,QAAA,EAC5BC,IAAA,CAACG,sBAAsB;MAAAJ,QAAA,EAAEA;IAAQ;EAA0B,GAC5C;AAErB;AAMA,MAAMK,qBAAqB,GAAIC,QAA6B,IAAI;EAC9D,MAAMC,MAAM,GAAgC,EAAE;EAC9CD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,OAAO,CAAEC,OAAO,IAAMF,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,GAAGD,OAAO,CAACE,gBAAiB,CAAC;EACpF,OAAOJ,MAAM;AACf,CAAC;AAED,MAAMK,sBAAsB,GAAIN,QAA6B,IAAI;EAC/D,MAAMC,MAAM,GAAgC,EAAE;EAC9CD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,OAAO,CAAEC,OAAO,IAAI;IAC5B,IAAIA,OAAO,CAACI,iBAAiB,EAAE;MAC7BN,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,GAAGD,OAAO,CAACI,iBAAiB;;EAEvD,CAAC,CAAC;EACF,OAAON,MAAM;AACf,CAAC;AAED,SAASH,sBAAsBA,CAAC;EAAEJ;AAAQ,CAAmB;EAC3D,MAAM;IAAEc,kBAAkB;IAAER,QAAQ;IAAES;EAAgB,CAAE,GAAGzB,SAAS,EAAE;EACtE,MAAM0B,gBAAgB,GAAG7B,OAAO,CAC9B,MAAO4B,gBAAgB,KAAK,CAAC,GAAGV,qBAAqB,CAACC,QAAQ,CAAC,GAAGM,sBAAsB,CAACN,QAAQ,CAAE,EACnG,CAACA,QAAQ,EAAES,gBAAgB,CAAC,CAC7B;EACD,MAAME,wBAAwB,GAAG9B,OAAO,CAAC,MAAMe,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMa,gBAAgB,GAAKF,kBAAkB,CAAG,EAAE,CAC/FE,gBAAgB,EAChBF,kBAAkB,CACnB,CAAC;EAEF,OACEb,IAAA,CAACL,cAAc;IAAAI,QAAA,EACbC,IAAA,CAACP,wBAAwB;MAAAM,QAAA,EACvBC,IAAA,CAACJ,wBAAwB;QAAAG,QAAA,EACvBC,IAAA,CAACN,oBAAoB;UAAAK,QAAA,EACnBC,IAAA,CAACR,sBAAsB;YAAAO,QAAA,EACrBC,IAAA,CAACZ,uBAAuB,EAAAa,MAAA,CAAAC,MAAA;cAACW,kBAAkB,EAAEG;YAAwB;cAAAjB,QAAA,EACnEC,IAAA,CAACV,qBAAqB;gBAAAS,QAAA,EACpBC,IAAA,CAACT,mBAAmB;kBAAAQ,QAAA,EAAEA;gBAAQ;cAAuB;YAC/B;UACA;QACH;MACJ;IACE;EACF,EACZ;AAErB"},"metadata":{},"sourceType":"module","externalDependencies":[]}